spring.datasource.url = jdbc:mysql://localhost:3306/ecommerce
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
server.port=8085
eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka
spring.application.name=order-service

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoints.health.show-details=always

#Resilience 4j properties
#to see different states of CB
resileince4j.circuitbreaker.config.default.registerHealthIndicator=true
resileince4j.circuitbreaker.instances.inventory.baseConfig=default
resileince4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resileince4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resileince4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resileince4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resileince4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resileince4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resileince4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#Resilience4j timeout properties
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#resilience 4j retry mechanism properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s
spring.zipkin.base-url=http://localhost:9411
#this probability tells that we would be sending 100% of the requests coming to zipkin server
spring.sleuth.sampler.probability=1.0
spring.cloud.compatibility-verifier.enabled=false
#kafka properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.microservices.orderservice.event.OrderPlacedEvent